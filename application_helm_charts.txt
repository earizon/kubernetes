# HELM Charts [[{application.helm,101,]]

> Package manager for Kubernetes with versioning, upgrades and rollbacks.

Helm allows for provisioning Kubernetes resources in the correct order.
* It comes also:
  * with lifecycle hooks.
  * advanced templating
  * sub-charts.
* Helm used a client-server architecture
  * Tiller Server: in-cluster. To install:
    ```
    $ helm init
    ```
  * Helm client  : command-line control pannel responsible for
    combining charts and installing kubernetes resources asked by the
    client.

* REFs:
  * <https://helm.sh/docs/intro/quickstart/>
  * <https://helm.sh/docs/intro/using_helm/>

* PRE-SETUP) "kubectl" installed locally.
* INITIAL-SETUP)<br/>
  Download from <https://github.com/helm/helm/releases>
  and add "helm" command to path.

## HELM "DAILY" USSAGE

  ```
  $ helm get -h
  $ helm repo add stable \                  <·· Add repo with name "stable"
    https://kubernetes-charts.storage.googleapis.com/
  $ helm repo add brigade \                 <·· Add another repo
    https://brigadecore.github.io/charts
  $ helm search repo stable                 <·· alt 1: search charts available in repo named 'stable'
  > NAME                          CHART     APP         DESCRIPTION
  >                               VERSION   VERSION
  > stable/acs-engine-autoscaler  2.2.2     2.1.1       DEPRECATED Scales worker nodes within agent pools
  > stable/aerospike              0.2.8     v4.5.0.5    A Helm chart for Aerospike in Kubernetes
  > stable/airflow                4.1.0     1.10.4      Airflow is a platform to programmatically autho...
  > ...

  $ helm search hub wordpress               <·· alt 2: search charts in "ARTIFACT HUB" (dozens of different repos).
  > URL                                                 CHART     APP     DESCRIPTION
  >                                                     VERSION   VERSION
  > https://hub.helm.sh/charts/bitnami/wordpress        7.6.7     5.2.4   Web publishing ...
  > https://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3    v0.6.3  Presslabs WordPress Operator ....
  > ...

  $ helm repo update                          <··  Make sure we get the latest list of charts (sort of "apt update")
  $ helm show values stable/mysql             <··  Show what params can be customized 
                                                   during install
  $ editor custom01.yaml
  { mysql.auth.username: ...  }

  $ helm install                  \           <·· Install MySQL (it can take a several minutes)
         -values custom01.yaml                    <·· (opt) overwrite defaults values
         --set   a[0].b=v1,b.c=v1                 <·· (opt) overwrite --values and/or defaults
         --set   name={a, b, c}                   <·· (opt) custom values list
         --wait                                   <·· (opt)  Waits for: [min. num of Pods in "ready state", PVCs bound]
         --timeout: 0m20s                         <·· (opt, def: 5m0s)
         stable/mysql --generate-name
 
 
  $ helm show chart stable/mysql              ← get an idea of the chart features
  $ helm show all   stable/mysql              ← get all information about chart
 
  $ helm install my-nginx ./mynginx           ← Install chart from local dir.
  $ helm delete --purge my-nginx              ← Clean-up install
 
  Whenever an install is done, a new local-release is created
  allowing to install multiple times into the same cluster.
  Each local-release can be independently managed and upgraded.

  To list local released:
  $ helm ls --all
  NAME             VERSION   UPDATED        STATUS    CHART
  smiling-penguin  1         Wed Sep 28...  DEPLOYED  mysql-0.1.0
  └──────┬──────┴─···························· local-release == running instance of chart
  Available through INMUTABLE local DNS name:
  miling-penguin.default.svc.cluster.local (port 3306)
                 └─────┴································· (or any active namespace)
  $ kubectl get svc -w smiling-penguin      <·· get service  status("INMUTABLE VIEW" of App -moving pods)

  $ helm uninstall smiling-penguin \        <·· Uninstall local-release
  $      --keep-history                     <·· Allows to rollback deleted install
  Removed smiling-penguin
  $ helm status smiling-penguin
  Status: UNINSTALLED                       <·· works only with '--keep-history'
  $ helm rollback smiling-penguin 1         <···┘
  ```

## Creating new Charts  <!-- { $create_new_chart -->
  
* REFS:
  * <https://www.youtube.com/watch?v=3GPpm2nZb2s>
  * <https://helm.sh/docs/developing_charts/>

```
  $ helm create myapp    ← alt 1: Create from helm template
  myapp/             ← template layout
  ├─ charts/         ← complex apps can consists of many "parallel" charts.
  │                    (front-end service/s, backend/s, middleware, cache, ...)
  │
  │                    Alternatively use requirements.yaml like:
  │                    $ cat requirements.yaml
  │                    | dependencies:
  │                    |   - name: apache
  │                    |     version: 1.2.3
  │                    |     repository: http://repo1.com/charts  ← Pre-Setup:
  │                    |   - name: mysql                            $ helm repo add ...
  │                    |     version: 4.5.6
  │                    |     repository: http://repo2.com/charts
  │                    $ helm dependency update  ← Download deps. to charts/
  │
  ├─ Chart.yaml      ← Sort of chart metadata
  │  ▶│apiversion: v1  ┌Change to 0.2.0 then :
  │   │name: my-nginx  │  $ helm upgrade  my-nginx .   ← Upgrade  0.1.0 → 0.2.0
  │   │version: 0.1.0 ←┘  $ helm rollback my-nginx 1   ← Rollback to rev 1 (0.1.0)
  │   │                   $ helm rollback my-nginx 2   ← Rollback to rev 2 (0.2.0)
  │   │appVersion: 1.0-SNAPSHOT (e.g: we can have different type of helm
  │   │                          deployments (versions) with different types of
  │   │                          replica instances for the same web application)
  │   │description: "chart -vs app- description"
  │   │...  ← eubeVersion, maintainers, template engine, deprecated, ...
  │
  ├─ values.yaml     ← Default values for parameters in yaml templates
  │                    (ports, replica counts, max/min, ...) to be replaced as
  │                    {{ .Values.configKey.subConfigKey.param }}.
  │                    They can be overloaded at install/upgrade like:
  │                    $ helm install|upgrade ... --set configKey.subConfigKey.param=...
  └─ templates
     ├─ deployment.yaml  ← Can be created manually like:
     │                     $ kubectl create deploy nginx --image nginx \
     │                       --dry-run -o yaml > deployment.yaml
     │ 
     ├─ service.yaml     ← Can be created manually like:
     │                     $ kubectl expose deploy mn-nginx -port 80   \
     │                       --dry-run -o yaml > service.yaml
     │ 
     ├─ _helpers.tpl     ← files prefixed with '_' do not create k8s output
     │                     Used for reusable pieces of template
     ├─ hpa.yaml
     ├─ ingress.yaml
     ├─ NOTES.txt
     ├─ serviceaccount.yaml
     └─ tests
        └── test-connection.yaml
```

```
./mychart/Chart.yaml
./mychart/values.yaml
```

```
cat ./mychart/templates/_helpers.yaml
 {{/* some helping comment */}}
 {{- define "mychart.v1.labels" }}    <··· embed as:
 labels:                              {{- include "mychart.v1.labels" . | indent 2 }}
   generator: helm
   date: {{ now | htmlDate }}
   chart: {{ .Chart.Name }}
   version: {{ .Chart.Version }}
 {{- end }}
```

```
cat ./mychart/templates/configmap.yaml
  | apiVersion: v1
  | kind: ConfigMap
  | metadata:
  |   name: {{ .Release.Name }}-configmap
  |   keyXX: {{ .Values.keyXX | default "SomeDefValue" }}
  | data:
  |   myvalue: "Hello World"
  |   {{- $keepRefVar := .Release.Name -}}
  |   {{- with .Values.favorite }}
  |   drink: {{ .drink | default "tea" | quote }}
  |   food:  {{ $.Values.favorite.food | upper | quote }}
  |   {{ if eq .drink "coffee" }}
  |   mug: "true"*           <·· '*' at the end of line => remove \n
  |   {{- end }}
  |   toppings: |-
  |     {{- range $.Values.pizzaToppings }}
  |     - {{ . | title | quote }}
  |     {{- end }}
  |   release: {{ $keepRefVar }}
  |   {{- end }}
  |   {{- range tuple "config1.toml" "config2.toml" }}
  |   {{ . }}: |-
  |         {{ $files.Get . }}
  |   {{- end }}
  |   {{ range $path, $_ :=  .Files.Glob  "**.yaml" }}
  |       {{- with $currentScope}}
  |           {{ .Files.Get $path }}
  |       {{- end }}
  |   {{ end }}
  |   {{ (.Files.Glob "foo/*").AsConfig | indent 2 }}
  |   {{ (.Files.Glob "bar/*").AsSecret | indent 2 }}
  |   token: |-
  |         {{ .Files.Get "config1.toml" | b64enc }}
  |   some-file.txt: {{ range .Files.Lines "foo/bar.txt" }}
  |     {{ . }}{{ end }}
```

```
cat ./chart/templates/NOTES.txt
  | Thank you for installing {{ .Chart.Name }}.
  |
  | Your release is named {{ .Release.Name }}.
  |
  | To learn more about the release, try:
  |
  |   $ helm status {{ .Release.Name }}
  |   $ helm get all {{ .Release.Name }}
```


```
cat ./mychart/charts/subchartX/Values.yaml <·· Subcharts are considered 
 ...                         "stand-alone". depends on parent charts__
 keyA: valueA           <·· modify in parent as --set mysubchart/keyA=...
 global:                <·· Use global to reuse same var in chart/subcharts.
   language: en             as .Values.global.salad
                            In parent we will just just --set global.language=...
                            and it will also be applied to subchart.
```

```
./mychart/.helmignore
  | .git
  | /*.txt
  | ...
```

```
$ helm install --debug \         # [[{application.helm.debug,troubleshooting]]
       --dry-run goodly-guppy \  # --disable-openapi-validation to render
       ./mychart                 # outputs incompatible with the defined API
                                 # (for example a misconfigured scope makes some
                                 #  expected value undefined/empty)
$ helm lint

$ helm template --debug

$ helm get manifest # see templates installed on the server

$ helm get manifest RELEASE | schelm OUTPUT_DIR
$ helm install --dry-run --debug CHART | schelm OUTPUT_DIR
                                         [[application.helm.debug}]]
```

## Built in Chart objects
```
.Release.Name:
.Release.Namespace: (if not overriden by manifest)
.Release.IsUpgrade:
.Release.IsInstall:
.Release.Revision: On install is 1,  incremented with each upgrade/rollback.
.Release.Service: service rendering the template (On Helm, == "Helm")
```
```
.Values.* : any value from values.yaml
```
```
.Chart.Name    : any value in Chart.yaml
.Chart.Version
.Chart.*
```
```
.Capabilities.APIVersions.*
.Capabilities.KubeVersion.*
.Capabilities.HelmVersion.*
```
```
.Template.Name: current template file path
.Template.BasePath: current template base (dir) path
```

### Recipes

* To delete a default value set it to null (not nil) in values.yaml or --set flag.
* look up resources in RUNNING cluster with function:
  lookup $apiVersion $kind $namespace $name -> resource or resource list
  (similar to kubectl get $inkd $name -n $namespace)

## Boolean Fun.

* NOTE: Many of the folling functions can fail.         [[{qa.error_mng.fail_fast]]
  By default a failing function "someVerb" will panic
  while a "mustSomeVerb" will return an Error.

    The function `fail` can also be used to progamatically fail.
                                                        [[qa.error_mng.fail_fast}]]
  ```
  not .Arg
  XX .Arg1 .Arg2    XX = and or  eq ne lt le gt ge

  default "defValue0" .Bar            <·· See also coalesce
  empty (true|false)
  coalesce 0 1 2                      <·· return 1 (first non-empty one)
  coalesce .name .parent.name "Matt"
  ternary "foo" "bar" true   # returns "foo" (1st value)
  true | ternary "foo" "bar"
  ```

##  String Fun.

  ```
  abbrev, abbrevboth, camelcase, cat, contains, hasPrefix, hasSuffix,
  indent, initials, kebabcase, lower, nindent, nospace, plural, print,
  printf, println, quote, randAlpha, randAlphaNum, randAscii,
  randNumeric, repeat, replace, shuffle, snakecase, squote, substr,
  swapcase, title, trim, trimAll, trimPrefix, trimSuffix, trunc,
  untitle, upper, wrap, and wrapWith.
  ```

  ```
  print "Matt has " .Dogs " dogs"
  println
  printf "%s has %d dogs." .Name .NumberDogs
  trimPrefix "-" "-hello"  # trimSuffix
  lower/upper
  repeat 3 "X"  <·· XXX

  substr $start $end $string
  nospace
  trunc 5 "hello world"
  randNumeric 3
  wrap 80 $someText   # wrapWith
  contains "cat" "catch"
  hasPrefix and hasSuffix
  cat "hello" "beautiful" "world"
  indent 4 $lots_of_text # nindent
  "I Am Henry VIII" | replace " " "-"
  ```

## Type conversion Fun.

* atoi: Convert a string to an integer.
* float64: Convert to a float64.
* int: Convert to an int at the system's width.
* int64: Convert to an int64.
* toDecimal: Convert a unix octal to a int64.
* toString: Convert to a string.
* toStrings: Convert a list, slice, or array to a list of strings.
* toJson: Convert list, slice, array, dict, or object to JSON.
* toPrettyJson: Convert list, slice, array, dict, or object to indented JSON.
* toRawJson: Convert list, slice, array, dict, or object to JSON with HTML characters unescaped.
* fromYaml: Convert a YAML string to an object.
* fromJson: Convert a JSON string to an object.
* toYaml: Convert list, slice, array, dict, or object to indented
  yaml, can be used to copy chunks of yaml from any source. This
  function is equivalent to GoLang yaml.Marshal function, see docs
  here: https://pkg.go.dev/gopkg.in/yaml.v2#Marshal
  ```
  e.g: list 1 2 3 | toStrings
  ```

## RegEX Fun.

  ```
  regexMatch "^[A-Za-z0-9._%+-]+<A-Za-z0-9.->+\\.[A-Za-z]{2,}$" "test@acme.com"
  regexFindAll "[2,4,6,8]" "123456789" -1  <··· result [2 4 6 8]
  regexFind # Return first (left most) match
  regexFind "[a-zA-Z][1-9]" "abcd1234"
  regexReplaceAll
  regexSplit
  ```

## Crypto&Sec. Fun.

  ```
  sha1sum "Hello world!"
  sha256sum "Hello world!"
  adler32sum "Hello world!"
  htpasswd "myUser" "myPassword"
  derivePassword
  genPrivateKey  (into PEM block)
      ecdsa: Generate an elliptic curve DSA key (P256)
      dsa: Generate a DSA key (L2048N256)
      rsa: Generate an RSA 4096 key
  $ca := buildCustomCert "base64-encoded-ca-crt" "base64-encoded-ca-key"
  $ca := genCA "foo-ca" 365 # generates new, self-signed x509 certificate authority.
  $cert := genSelfSignedCert "foo.com" (list "10.0.0.1" "10.0.0.2") (list "bar.com" "bat.com") 365
  encryptAES "secretkey" "plaintext"
  "30tEfhuJSVRhpG97XCuWgz2okj7L8vQ1s6V9zVUPeDQ=" | decryptAES "secretkey"
  ```

## Date Fun.

  ```
  ago <·· Use this in conjunction with other date functions.
          It returns duration from time.Now in seconds resolution.
  ago .CreatedAt #2h34m7s
  now | date "2006-01-02"
  dateInZone "2006-01-02" (now) "UTC"
  duration 95 # returns 1m35s
  durationRound "2h10m5s" # 2h
  durationRound "2400h10m5s" # 3mo
  now | unixEpoch # seconds since the unix epoch for a time.Time.
  now | date_modify "-1.5h"

  now | htmlDate # formats a date for inserting into an HTML date picker input field.
  htmlDateInZone (now) "UTC"
  toDate "2006-01-02" "2017-12-31" | date "02/01/2006"
  ```

## Dictionaries  string-key/any-value

* NOTE: lists are inmutable, dicst art NOT.
* dicts functions: 
  ```
  deepCopy, dict, dig, get, hasKey,
  keys, merge, mergeOverwrite, omit,
  pick, pluck, set, unset, and values.
  ```

  ```
  $myDict := dict "name1" "value1" "name2" "value2" "name3" "value 3"
  get $myDict "name1"
  $_ := set $myDict "name4" "value4"
  $_ := unset $myDict "name4"
  ^^
  un/set returns the dictionary (a requirement of Go template functions),
  hasKey $myDict "name1"
  pluck "keyXX" $myDict01 $myDict01 # <·· return list of all of matches.
  pluck  ... | first                  <·· get first matching key
  dig "user" "role" "humanName" "guest" $dict <·· dig fetch in trees of dics.
  {                              └────┴─ default value if dig fails.
    user: {
      role: {
        humanName: "curator"
      }
    }
  }
  merge a b c | dig "one" "two" "three" "<missing>"
  deepCopy $source | merge $dest
  mergeOverwrite
  deepCopy $source | mergeOverwrite $dest
  keys $myDict | sortAlpha
  $new := pick $myDict "name1" "name2" # pick function selects just the given keys
                                         out of a dictionary, creating a new dict.
  $new := omit $myDict "name1" "name3" # like pick with all not matching keys.
  $vals := values $myDict              # returns new list with all the values of
                                         the source dict
  deepCopy
  ```

## Encoding Functions

  ```
  b64enc/b64dec: Encode or decode with Base64
  b32enc/b32dec: Encode or decode with Base32
  ```

## Lists and List Functions

  ```
  $myList := list 1 2 3 4 5
  first
  rest    # get tail of the list.
  last
  initial
  $new = append  $myList 6 #
         prepend
  concat $myList ( list 6 7 ) ( list 8 )
  reverse
  uniq
  list 1 1 1 2 | uniq
  without $myList 3 #
  has 4 $myList
  $copy := compact ( list 1 "a" "foo" "" ) #  remove empty values
  index
  index $myList 0 # returns 1. It is the same as myList[0]
  index $myList 0 # 1 would be the same as myList[0][1]
  slice $myList returns [1 2 3 4 5]. It is same as myList[:].
  The until function builds a range of integers.
  until 5 # [0, 1, 2, 3, 4].
  untilStep 3 6 2 # [3 5]
  seq -3      => 1 0 -1 -2 -3
  seq 0 2     => 0 1 2
  ```

## Math Fun.

  ```
  add, add1, ceil, div, floor, len, max, min, mod, mul, round, and sub.
  ```

## Network Fun.

  ```
  getHostByName "www.google.com" # return ip address
  ```

## File Path Fun.

  ```
  base "foo/bar/baz"     # baz
  dir "foo/bar/baz"      # foo/bar
  clean "foo/bar/../baz" # foo/baz
  ext "foo.jpg"          # .bar.
  isAbs                  # true if file path is absolute
  ```

## Reflection Fun.

(Advanced templates)

## Kind Fun.
  ```
  kindOf "hello"  # "string"
  kindIs "int" 123
  ```

## Type Fun.

  ```
 (slightly harder to work with)
  typeOf typeIs typeIsLike
  deepEqual (list 1 2 3) (list 1 2 3)
  ```

## SemVer Fun.

  ```
  $version := semver "1.2.3-alpha.1+123"
  $version.Major: The major number (1 above)
  $version.Minor: The minor number (2 above)
  $version.Patch: The patch number (3 above)
  $version.Prerelease: The prerelease (alpha.1 above)
  $version.Metadata: The build metadata (123 above)
  $version.Original: The original version as a string

  semver "1.4.3" | (semver "1.2.3").Compare # -1

  semverCompare "1.2.3" "1.2.4"  # false
  semverCompare "~1.2.3" "1.2.4" # true

  Basic Comparisons =:  !=:  >:  <:  >=:  <=:

  ~1.2.3 is equivalent to >= 1.2.3, < 1.3.0
  ~1 is equivalent to >= 1, < 2
  ~2.3 is equivalent to >= 2.3, < 2.4
  ~1.2.x is equivalent to >= 1.2.0, < 1.3.0
  ~1.x is equivalent to >= 1, < 2

  ^1.2.3 is equivalent to >= 1.2.3, < 2.0.0
  ^1.2.x is equivalent to >= 1.2.0, < 2.0.0
  ^2.3 is equivalent to >= 2.3, < 3
  ^2.x is equivalent to >= 2.0.0, < 3
  ^0.2.3 is equivalent to >=0.2.3 <0.3.0
  ^0.2 is equivalent to >=0.2.0 <0.3.0
  ^0.0.3 is equivalent to >=0.0.3 <0.0.4
  ^0.0 is equivalent to >=0.0.0 <0.1.0
  ^0 is equivalent to >=0.0.0 <1.0.0
  └ major comparision: equal up to major level
  ```

## URL Fun.

  ```
  urlParse "http://admin:secret@server.com:8080/api?list=false#anchor"
  scheme:   'http'
  host:     'server.com:8080'
  path:     '/api'
  query:    'list=false'
  opaque:   nil
  fragment: 'anchor'
  userinfo: 'admin:secret'

  urlJoin (dict "fragment" "fragment" "host" "host:80" "path" "/path" "query" "query" "scheme" "http") # http://host:80/path?query#fragment

  $var := urlquery "string for query"
  ```

## UUID Fun.

  ```
  uuidv4 # new randomly generated v4 UUID
  ```

## K8s&Chart Fun.

  ```
  lookup : look up resource in RUNNING cluster.
  .Capabilities.APIVersions.Has "apps/v1"
  .Capabilities.APIVersions.Has "apps/v1/Deployment"
  ```

## File Fun.

  ```
  Files.Get myConfig.ini
  Files.GetBytes myImage.png
  Files.Glob     *myShellGlob*
  Files.Lines    myLineByLineToBeIterated.txt
  Files.AsSecrets ...  <·· return body as Base64
  Files.AsConfig  ...  <·· return body as YAML map.
  ```
<!-- $create_new_chart } -->
[[application.helm}]]

## Helm Operator

* <https://docs.fluxcd.io/projects/helm-operator/en/1.0.0-rc9/references/helmrelease-custom-resource.html>

- operator watching for (Custom Resource) HelmRelease change events (from K8s).
  It reacts by installing or upgrading the named Helm release.
  (See oficial dock for setup/config params)

  ```
  apiVersion: helm.fluxcd.io/v1
  kind: HelmRelease              ← Custom resource
  metadata:
    name: rabbit
    namespace: default
  spec:
  · releaseName: rabbitmq        ← Automatically generated if not provided
  · targetNamespace: mq          ← same as HelmRelease project if not provided.
  · timeout: 500                 ← Defaults to 300secs.
  · resetValues: false           ← Reset values on helm upgrade
  · wait: false                  ← true: operator waits for Helm upgrade completion
  · forceUpgrade: false          ← true: force Helm upgrade through delete/recreate
  · chart:                       ← alt 1: chart from helm repository
  ·   repository: https://charts....     ← HTTP/s and also S3 / GCP Storage through extensions
  ·   name: rabbitmq
  ·   version: 3.3.6
  · # chart:                       ← alt 2: chart from git repository: Repo will be cloned
  · #                                       - git pooled every 5 minutes (See oficial doc. to
  · #                                         skip waiting)  *1
  · #
  · #   git: git@github.com:fluxcd/flux-get-started
  · #   ref: master
  · #   path: charts/ghost
  · values:                      ← values to override on source chart
  ·   replicas: 1
  · valuesFrom:                  ← Secrets, config Maps, external sources, ...
  · - configMapKeyRef:
  ·     name: default-values     ← mandatory
  ·     namespace: my-ns         ← (of config. map) defaults to HelmRelease one
  ·     key: values.yaml         ← Key in config map to get values from
  ·                                (defaults to values.yaml)
  ·     optional: false          ← defaults to false (fail-fast),
  ·                                true=> continue if values not found
  · - secretKeyRef:
  ·     name: default-values         ← mandatory
  ·     namespace: my-ns             ← (Of secrets) defautl to HelRelease one
  ·     key: values.yaml             ← Key in the secret to get the values from
  ·                                    (defaults to values.yaml)
  ·     optional: false          ← defaults to false (fail-fast),
  ·                                true=> continue if values not found
  ·  - externalSourceRef:
  ·      url: https://example.com/static/raw/values.yaml
  ·     optional: false          ← defaults to false (fail-fast),
  ·                                true=> continue if values not found
  ·
  · rollback:                    ← What to do if new release fails
      enable: false              ← true : perform rollbacks for releas.
      force: false               ← Rollback through delete/recreate if needed.
      disableHooks: false        ← Prevent hooks from running during rollback.
      timeout: 300               ← Timeout to consider failure install
      wait: false                ← true => wait for min.number of Pods, PVCs, Services
                                           to be ready state before marking release as
                                             successful.

   $ kubectl delete hr/my-release  ← force reinstall Helm release
                                     (upgrade fails, ... )
                                     Helm Operator will receive delete-event and force
                                     purge of Helm release. On next Flux sync, a new Helm Release
                                     object will be created and Helm Operator will install it.
  ```

  ```
  *1 : Git Authentication how-to:
  - Setup the SSH key with read-only access ("deploy key" in GitHub)
    (one for each accessed repo)

  - Inject each read-only ssh key into Helm Release operator
    by mounting "/etc/fluxd/ssh/ssh_config" into the container
    operator and mounting also (as secrets) each referenced
    priv.key in "/etc/fluxd/ssh/ssh_config"
  ```

* About helm-charts pod templates:
<https://helm.sh/docs/chart_best_practices/pods/>

> "...A container image should use a fixed tag or the SHA of the image. It
> should not use the tags latest, head, canary, or other tags that are
> designed to be "floating"..."

[[{101.arkade]]
# Arkade ("Easy Helm") 

* Arkade sits on top of Helm to simplify it ussage.<br/>
* It works like "apt" for kubernetes.
  
* Arkade also adds other "goodies" like the posibility to install a full k8s server,
  add ingress, TLS, ..., again ¡¡¡with just a single command!!!

* Extracted from <https://iximiuz.com/en/posts/how-to-setup-development-environment/>
  """ *I often hack on Cloud Native stack ... arkade comes in handy. 
   ... download and install other command-line tools such as kubectl,
   kustomize, helm, kind, and many more. ...
   It also comes with tens of helm charts, so one could install a docker registry,
   grafana, traefik2, or even linkerd or istio service mesh into a Kubernetes 
   cluster with just a single arkade command. 
    **Learning about arkade broke some sort of a psychological barrier 
   for me ... I'm less afraid of messing up with my local clusters 
   because I know that I can reproduce the setup with just a few arkade 
   get/install lines**. """

  ```
  | (Non normative example)
  | $ curl -sLS https://get.arkade.dev | sudo sh  # <·· install with a single command.
  | 
  | $ arkade --help
  | 
  | $ arkade get kubectl
  | $ arkade get kind          # <·· install kind in one line
  | $ kind create cluster
  | $ arkade install ingress-nginx
  | 
  | $ kubectl get all
  | NAME                                           READY   STATUS    RESTARTS   AGE
  | pod/ingress-nginx-controller-7d98fb5bd-956fq   1/1     Running   0          38s
  | 
  | NAME                                         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
  | service/ingress-nginx-controller             LoadBalancer   10.96.239.161   <pending>     80:31973/TCP,443:31901/TCP   38s
  | service/ingress-nginx-controller-admission   ClusterIP      10.96.11.19     <none>        443/TCP                      38s
  | service/kubernetes                           ClusterIP      10.96.0.1       <none>        443/TCP                      84s
  | ...
  ```
[[101.arkade}]]


